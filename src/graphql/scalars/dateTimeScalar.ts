//Code snippet generated by OpenAI, modified for typescript
const { GraphQLScalarType, Kind } = require("graphql");

const DateTimeScalar = new GraphQLScalarType({
  name: "DateTime",
  description: "ISO 8601-compliant date-time string",
  serialize(value: Date) {
    if (!(value instanceof Date)) {
      throw new TypeError("Value is not an instance of Date");
    }
    return value.toISOString(); // Converts Date to ISO string
  },
  parseValue(value: Date) {
    const date = new Date(value);
    if (isNaN(date.getTime())) {
      throw new TypeError("Value is not a valid ISO 8601 datetime string");
    }
    return date; // Converts ISO string to Date
  },
  parseLiteral(ast: any) {
    if (ast.kind === Kind.STRING) {
      const date = new Date(ast.value);
      if (isNaN(date.getTime())) {
        throw new TypeError("Value is not a valid ISO 8601 datetime string");
      }
      return date;
    }
    throw new TypeError("Value is not a valid ISO 8601 datetime string");
  },
});

export default DateTimeScalar;
